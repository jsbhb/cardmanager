<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.card.manager.factory.system.mapper.RoleMapper">
	<!-- Result Map -->
	<resultMap id="roleEntity"
		type="com.card.manager.factory.system.model.RoleEntity">
		<result column="roleId" property="roleId" />
		<result column="roleName" property="roleName" />
		<result column="roleState" property="roleState" />
		<result column="createTime" property="createTime" />
		<result column="updateTime" property="updateTime" />
		<result column="type" property="type" />
		<result column="parentName" property="parentName" />
	</resultMap>
	
	
	<resultMap id="gradeTypeRole"
		type="com.card.manager.factory.system.model.GradeTypeRole">
		<result column="roleId" property="roleId" />
		<result column="gradeTypeId" property="gradeTypeId" />
		<result column="createTime" property="createTime" />
		<result column="updateTime" property="updateTime" />
		<result column="opt" property="opt" />
	</resultMap>
	

	<select id="queryList" resultMap="roleEntity">
		select * from auth_role
	</select>

	<select id="queryNormal" resultMap="roleEntity">
		select * from auth_role where
		roleState = 1 and roleId > 1
	</select>

	<select id="queryAll" resultMap="roleEntity">
		select * from auth_role where roleId > 1
	</select>

	<select id="queryById" resultMap="roleEntity">
		select r.*,r1.roleName as parentName from auth_role r left join auth_role r1 on r.parentId = r1.roleid where
		r.roleid = #{roleId}
	</select>
	
	
	<select id="getRoleIdByGradeTypeId" resultType="object">
		select roleid from auth_gradeType_role where
		gradeTypeId = #{gradeTypeId}
	</select>
	
	<insert id="insert" useGeneratedKeys="true" keyProperty="roleid"
		parameterType="object">
		INSERT INTO auth_role (
		roleName,roleState,createTime,updateTime,opt,type,parentId) VALUE (#{roleName},#{roleState},now(),now(),#{opt},#{type},#{parentId})
	</insert>

	<insert id="insertGradeTypeRole" useGeneratedKeys="true" keyProperty="roleid"
		parameterType="object">
		INSERT INTO auth_gradeType_role (
		gradeTypeId,roleId,createTime,updateTime,opt) VALUE
		(#{gradeTypeId},#{roleId},now(),now(),#{opt})
	</insert>


	<update id="update" parameterType="object">
		update auth_role set updatetime = now()
		<if test="roleName !=null and roleName !=''">
			,roleName = #{roleName}
		</if>
		<if test="roleState !=null and roleState !=''">
			,roleState = #{roleState}
		</if>
		where roleid = #{roleId}
	</update>
	
	<update id="updateByGradeTypeId" parameterType="object">
		update auth_gradeType_role set roleid = #{roleId}
		where gradeTypeId = #{gradeTypeId}
	</update>

	<insert id="insertRoleFunc" parameterType="object">
		insert IGNORE into auth_rolefunc
		(roleid,funcid,privilege,createTime,updateTime,opt) value
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.roleId},#{item.funcId},#{item.privilege},now(),now(),#{item.opt})
		</foreach>
	</insert>

	<delete id="deleteAllFunc">
		delete from auth_rolefunc where roleid=#{roleId};
	</delete>
	
	<select id="getSubRoleIdList" resultType="String">
		select getRoleChildLst(#{roleId});
	</select>
	
	<select id="checkRoleInfoByIds" resultMap="roleEntity">
		select * from auth_role
		where roleid in (
			<foreach collection="list" item="item" index="index"
				separator=",">
				#{item}
			</foreach>
		)
		and roleState = '1'
	</select>

</mapper>